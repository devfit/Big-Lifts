task copyImages(type: Copy) {
    from 'images'
    into 'build/images'
    include '*.*'
}

task copyHtmlFiles(type: Copy, dependsOn: [copyImages]) {
    from '.'
    into 'build'
    include '*.html'
    include 'js/**/*.png'
}

task copyAppIcon(type: Copy) {
    from 'distribution'
    into 'build'
    include 'icons/**/*.png'
}

task copySplashes(type: Copy) {
    from 'distribution'
    into 'build'
    include 'splashes/**/*.png'
}

task copyPhonegapConfig(type: Copy) {
    from '.'
    into 'build'
    include 'config.xml'
}

def compress(String type, String baseDirectory) {
    def elementsToMinify = []
    fileTree {
        from baseDirectory
        include "**/*.$type"
    }.visit { element ->
        if (element.file.isFile()) {
            elementsToMinify << element
        }
    }

    elementsToMinify.each { element ->
        println "Minifying ${element.relativePath}"
        def outputFileLocation = "build/$baseDirectory/${element.relativePath}"
        new File(outputFileLocation).parentFile.mkdirs()
        minify("$baseDirectory/${element.relativePath}", outputFileLocation)
    }
}

def minify(String input, String output) {
    ant.java(jar: "lib/yuicompressor-2.4.7.jar", fork: true) {
        arg(value: input)
        arg(value: "-o")
        arg(value: output)
    }
}

task compressJs {
    inputs.dir new File('js')
    outputs.dir new File('build/js')

    doLast {
        compress('js', 'js')
    }
}

task compressCss {
    inputs.dir new File('css')
    inputs.dir new File('js')
    outputs.dir new File('build/css')
    outputs.dir new File('build/js')

    doLast {
        compress('css', 'css')
        compress('css', 'js')
    }
}

task copyCss(type: Copy) {
    from '.'
    into 'build'
    include 'css/**/*.css'
    include 'js/**/*.css'
}

defaultTasks 'clean', 'build'

task clean << {
    String gitBackupDirectory = 'build-backup-git'
    mkdir(gitBackupDirectory)
    copy {
        from 'build/.git'
        into gitBackupDirectory
    }
    delete('build')
    mkdir('build')
    mkdir('build/.git')

    copy {
        from gitBackupDirectory
        into 'build/.git'
    }

    delete gitBackupDirectory
}

task build(dependsOn: [copyHtmlFiles, copyPhonegapConfig, copyAppIcon, copySplashes, compressJs, copyCss]) << {
}

task test(type: Exec) {
    commandLine = ['cucumber']
    workingDir = new File('./test')
}

def getGitStatus() {
    def p = ['git', 'status'].execute()
    p.waitFor()
    p.text
}

def gitHasNoChangesToCommit() {
    String gitStatus = getGitStatus()
    return gitStatus.contains('no changes added to commit')
}

task version << {
    if (!gitHasNoChangesToCommit()) {
        throw new GradleException("There are git changes to commit. Commit or unstage changes to version this release.")
    }
    else {
        File versionFile = new File('js/version.json')
        String oldVersionCallback = versionFile.text
        def versionPattern = /\{"version":(\d+)\}/
        def matcher = (oldVersionCallback =~ versionPattern)
        long version = matcher[0][1] as long
        version++;
        String newVersionCallback = oldVersionCallback.replaceAll(versionPattern, '{"version":' + version + '}')

        versionFile.withWriter { w ->
            w.write(newVersionCallback);
        }

        exec {
            commandLine = ['git', 'add', versionFile.path]
        }
        exec {
            commandLine = ['git', 'commit', '-m', 'Incrementing build version']
        }
    }
}

task deploy(dependsOn: ['version']) << {
    tasks.build.execute()
    exec {
        commandLine = ['git', 'add', '-u']
        workingDir = new File('./build')
    }
    exec {
        commandLine = ['git', 'add', '.']
        workingDir = new File('./build')
    }
    exec {
        commandLine = ['git', 'commit', '-m', '"Building"']
        workingDir = new File('./build')
    }
    exec {
        commandLine = ['git', 'push', 'build', 'master']
        workingDir = new File('./build')
    }
}